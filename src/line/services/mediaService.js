// server/src/line/services/mediaService.js

/**
 * mediaService.js  (stream version)
 * ---------------------------------
 * - ‡∏î‡∏∂‡∏á media ‡∏à‡∏≤‡∏Å LINE ‡∏ó‡∏≤‡∏á stream
 * - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå
 * - pipe ‡∏•‡∏á uploads/temp/<type>/...
 */

const axios  = require('axios');
const fs     = require('fs');
const path   = require('path');
const mime   = require('mime-types');
const { pipeline } = require('stream/promises');
const { lineMessagingApiConfig } = require('../config/lineConfig');

/** üîí limit (byte) */
const MAX_FILE_SIZES = {
  image   : 1  * 1024 * 1024,   // 1 MB
  video   : 50 * 1024 * 1024,   // 50 MB
  file    : 20 * 1024 * 1024,   // 20 MB
  default : 10 * 1024 * 1024
};

// ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô
function normalizeMediaType(messageType, mimeType = '', fileName = '') {
  const mt = (mimeType || '').toLowerCase();
  const fn = (fileName || '').toLowerCase();

  // 1) ‡∏ï‡∏≤‡∏° MIME ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏°‡πà‡∏ô‡∏™‡∏∏‡∏î
  if (mt.startsWith('image/')) return 'image';
  if (mt.startsWith('video/')) return 'video';
  if (mt.startsWith('audio/')) return 'file'; // ‡∏à‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ

  // 2) ‡∏ï‡∏≤‡∏° message.type ‡∏à‡∏≤‡∏Å LINE
  if (['image', 'video'].includes(messageType)) return messageType;
  if (['file', 'audio'].includes(messageType)) return 'file';

  // 3) ‡∏ï‡∏≤‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
  if (/\.(jpg|jpeg|png|gif|webp|bmp|heic|heif)$/.test(fn)) return 'image';
  if (/\.(mp4|mov|m4v|webm|avi|mkv)$/.test(fn)) return 'video';

  return 'file';
}

// ‡πÅ‡∏°‡∏õ‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢/‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô type ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
function sanitizeType(raw) {
  const t = String(raw || '').trim().toLowerCase();
  // ‡πÑ‡∏ó‡∏¢ ‚Üí ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
  if (['‡∏†‡∏≤‡∏û', '‡∏£‡∏π‡∏õ', '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'].includes(t)) return 'image';
  if (['‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠', '‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠', '‡∏ß‡∏¥‡∏î‡∏¥‡πÇ‡∏≠'].includes(t)) return 'video';
  if (['‡πÑ‡∏ü‡∏•‡πå', '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£'].includes(t)) return 'file';

  // ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ï‡∏±‡∏ß‡∏û‡πâ‡∏≠‡∏á
  if (t === 'images') return 'image';
  if (t === 'videos') return 'video';
  if (t === 'files')  return 'file';

  // ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
  if (['image','video','file','others'].includes(t)) return t;

  return t; // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÑ‡∏õ‡πÉ‡∏´‡πâ validation ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ï‡πà‡∏≠ (‡∏à‡∏∞ throw ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ã‡πá‡∏ï)
}

// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î media ‡∏à‡∏≤‡∏Å LINE ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ticketId + timestamp + ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏∏‡πà‡∏°
exports.downloadLineMedia = async (message, lineUid, ticketId, userId) => {
  const url     = `https://api-data.line.me/v2/bot/message/${message.id}/content`;
  const headers = { Authorization: `Bearer ${lineMessagingApiConfig.channelAccessToken}` };

  // (1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î MIME ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ HEAD request
  const head = await axios.head(url, { headers });
  const size  = Number(head.headers['content-length'] || 0);
  const cType = head.headers['content-type'] || 'application/octet-stream';

  // ‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà normalize ‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå)
  const mediaType = normalizeMediaType(message.type, cType, message.fileName);

  // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (image / file / video)
  const limit = MAX_FILE_SIZES[mediaType] ?? MAX_FILE_SIZES.default;
  if (size > limit) {
    throw new Error(
      `‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î ${(size / 1024 / 1024).toFixed(1)} MB ‡πÄ‡∏Å‡∏¥‡∏ô ${(limit / 1024 / 1024)} MB`
    );
  }

  // (2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏ö temp (‡πÄ‡∏ä‡πà‡∏ô uploads/temp/image)
  const baseDir = path.join(__dirname, '../uploads/temp', mediaType);
  if (!fs.existsSync(baseDir)) fs.mkdirSync(baseDir, { recursive: true });

  // ‡∏´‡∏≤ extension ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ fallback ‡∏ï‡∏≤‡∏°‡∏ä‡∏ô‡∏¥‡∏î‡∏™‡∏∑‡πà‡∏≠ (‡∏Å‡∏±‡∏ô content-type ‡πÄ‡∏õ‡πá‡∏ô octet-stream ‚Üí .bin)
  const extFromName = path.extname(message.fileName || '').replace(/^\./, '');
  const extFromMime = mime.extension(cType) || '';
  let ext = extFromName || extFromMime;
  if (!ext || ext === 'bin') {
    if (mediaType === 'video') ext = 'mp4';
    else if (mediaType === 'image') ext = 'jpeg';
    else if (mediaType === 'audio' || mediaType === 'voice') ext = 'm4a';
    else ext = 'bin';
  }

  // (3) ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå temp
  const safeTicketId = ticketId || 'unknown';
  const safeUserId   = userId || lineUid; // (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡∏ï‡πà‡∏≠‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á)
  const now = new Date();
  const timeStr = now.toISOString().replace(/[-:]/g, '').slice(0, 15).replace('T', '_'); // YYYYMMDD_HHmmss
  const random = Math.random().toString(36).substring(2, 5); // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏∏‡πà‡∏° 3 ‡∏ï‡∏±‡∏ß
  const altFilename = `ticket_${safeTicketId}_${timeStr}_${random}.${ext}`;

  // (4) path ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏ü‡∏•‡πå temp + ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ö‡∏ö stream
  const absPath = path.join(baseDir, altFilename);
  const res = await axios.get(url, { headers, responseType: 'stream' });
  await pipeline(res.data, fs.createWriteStream(absPath));  // non-blocking I/O

  // (5) ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• metadata (‡πÉ‡∏™‡πà type ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô + path ‡πÅ‡∏ö‡∏ö relative)
  return {
    originalname : message.fileName || altFilename,
    path         : `uploads/temp/${mediaType}/${altFilename}`, // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô relative (‡πÑ‡∏°‡πà‡∏°‡∏µ / ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤)
    mimetype     : cType,
    size,
    extension    : `.${ext}`,
    type         : mediaType,
  };
};

// ‡πÉ‡∏ä‡πâ meta.type ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÅ‡∏ï‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢)
exports.moveTempToPermanent = (meta, ticketId) => {
  const rootDir = path.join(__dirname, '..');

  // 1) sanitize type ‡∏Å‡πà‡∏≠‡∏ô validate
  const allowed = new Set(['image', 'video', 'file', 'others']);
  const type = sanitizeType(meta?.type);
  if (!allowed.has(type)) {
    // ‡πÉ‡∏´‡πâ fail ‡∏ä‡∏±‡∏î ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ root cause ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏Å‡∏≥‡πÄ‡∏ô‡∏¥‡∏î meta
    throw new Error(`Invalid meta.type: ${meta?.type}. Expected one of ${[...allowed].join(', ')}`);
  }

  // 2) ‡∏ó‡∏≥ path ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô relative ‡πÄ‡∏™‡∏°‡∏≠ (‡∏Å‡∏±‡∏ô / ‡∏´‡∏£‡∏∑‡∏≠ \ ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤)
  const relPath = String(meta.path || '').replace(/^[/\\]+/, '');
  const srcAbs  = path.join(rootDir, relPath);

  // 3) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ï‡∏≤‡∏° ticketId/type ‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
  const destDir = path.join(rootDir, 'uploads', String(ticketId), type);
  if (!fs.existsSync(destDir)) fs.mkdirSync(destDir, { recursive: true });

  const destAbs = path.join(destDir, path.basename(srcAbs));
  fs.renameSync(srcAbs, destAbs);

  // 4) ‡∏Ñ‡∏∑‡∏ô meta ‡πÄ‡∏î‡∏¥‡∏° ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï path ‡πÉ‡∏´‡∏°‡πà (‡∏Ñ‡∏á type ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà sanitize ‡πÅ‡∏•‡πâ‡∏ß)
  return {
    ...meta,
    type,
    path: `/uploads/${ticketId}/${type}/${path.basename(destAbs)}`
  };
};


// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡∏à‡∏≤‡∏Å session ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡∏≤‡∏ß‡∏£
// ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
exports.deleteTempFiles = (sess) => {
  const rootDir = path.join(__dirname, '..'); // ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á root ‡∏Ç‡∏≠‡∏á uploads
  (sess?.data?.pending_files || []).forEach((m) => {
    try {
      const rel = String(m.path || '').replace(/^[/\\]+/, '');
      fs.unlinkSync(path.join(rootDir, rel));
    } catch {}
  });
};

// ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á ticket ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
// ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏•‡∏ö ticket ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏î‡πâ‡∏ß‡∏¢
exports.deleteTicketFolder = async (ticketId) => {
  const folderPath = path.join(__dirname, '../uploads', String(ticketId));
  try {
    await fs.promises.rm(folderPath, { recursive: true, force: true });
    console.log(`üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ô‡∏ö ticket-${ticketId} ‡πÅ‡∏•‡πâ‡∏ß`);
  } catch (err) {
    console.error(`‚ùå ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ticket-${ticketId}:`, err.message);
  }
};


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå temp ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ maxAgeMinutes ‡∏ô‡∏≤‡∏ó‡∏µ
exports.cleanOldTempFiles = (maxAgeMinutes = 60) => {
  const baseTempPath = path.join(__dirname, '../uploads/temp');
  const subfolders = ['image', 'video', 'file', 'others'];
  const now = Date.now();

  subfolders.forEach((sub) => {
    const folder = path.join(baseTempPath, sub);
    if (!fs.existsSync(folder)) return;

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
    fs.readdir(folder, (err, files) => {
      if (err) return console.error(`‚ùå ‡∏≠‡πà‡∏≤‡∏ô ${folder} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:`, err.message);

      files.forEach((file) => {
        const fullPath = path.join(folder, file);
        fs.stat(fullPath, (err, stats) => {
          if (err) return;
          const ageMs = now - stats.mtimeMs;
          if (ageMs > maxAgeMinutes * 60 * 1000) {
            fs.unlink(fullPath, (err) => {
              if (!err) console.log(`üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß: ${fullPath}`);
            });
          }
        });
      });
    });
  });
};
